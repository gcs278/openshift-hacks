#!/bin/bash

function oc_ingress_unmanaged_privileged() {
  oc_ingress_unmanaged
  oc_ingress_privileged
}

function oc_ingress_unmanaged_privileged_reset() {
  oc_ingress_managed
  oc_ingress_unprivileged
}

function oc_ingress_managed() {
  oc patch clusterversions/version --type=json --patch='[{"op":"add","path":"/spec/overrides","value":[{"kind":"Deployment","group":"apps/v1","name":"ingress-operator","namespace":"openshift-ingress-operator","unmanaged":false}]}]'
  oc scale --replicas 1 -n openshift-cluster-version deployments/cluster-version-operator
  oc scale --replicas 1 -n openshift-ingress-operator deployments ingress-operator
  oc scale --replicas 2 -n openshift-ingress-operator ingresscontroller/default
}

function oc_ingress_unprivileged() {
  oc patch clusterrole/openshift-ingress-router --type=strategic --patch='{"rules":[{"apiGroups":[""],"resources":["endpoints","namespaces","services"],"verbs":["list","watch"]},{"apiGroups":["authentication.k8s.io"],"resources":["tokenreviews"],"verbs":["create"]},{"apiGroups":["authorization.k8s.io"],"resources":["subjectaccessreviews"],"verbs":["create"]},{"apiGroups":["route.openshift.io"],"resources":["routes"],"verbs":["list","watch"]},{"apiGroups":["route.openshift.io"],"resources":["routes/status"],"verbs":["update"]},{"apiGroups":["security.openshift.io"],"resourceNames":["hostnetwork"],"resources":["securitycontextconstraints"],"verbs":["use"]},{"apiGroups":["discovery.k8s.io"],"resources":["endpointslices"],"verbs":["list","watch"]}]}'
  oc patch -n openshift-ingress deployment/router-default --patch='{"spec":{"template":{"spec":{"securityContext":{"runAsUser":null}}}}}'
  oc patch -n openshift-ingress deployment/router-default --patch='{"spec":{"template":{"spec":{"hostNetwork":true}}}}'
}

function oc_ingress_unmanaged() {
  oc scale --replicas 0 -n openshift-cluster-version deployments/cluster-version-operator
  oc scale --replicas 0 -n openshift-ingress-operator deployments ingress-operator

  oc patch clusterversions/version --type=json --patch='[{"op":"add","path":"/spec/overrides","value":[{"kind":"Deployment","group":"apps/v1","name":"ingress-operator","namespace":"openshift-ingress-operator","unmanaged":true}]}]'
  oc scale --replicas 0 -n openshift-ingress-operator deployments ingress-operator
}

function oc_ingress_privileged() {
  oc patch clusterrole/openshift-ingress-router --type=strategic --patch='{"rules":[{"apiGroups":[""],"resources":["endpoints","namespaces","services"],"verbs":["list","watch"]},{"apiGroups":["authentication.k8s.io"],"resources":["tokenreviews"],"verbs":["create"]},{"apiGroups":["authorization.k8s.io"],"resources":["subjectaccessreviews"],"verbs":["create"]},{"apiGroups":["route.openshift.io"],"resources":["routes"],"verbs":["list","watch"]},{"apiGroups":["route.openshift.io"],"resources":["routes/status"],"verbs":["update"]},{"apiGroups":["security.openshift.io"],"resourceNames":["privileged"],"resources":["securitycontextconstraints"],"verbs":["use"]},{"apiGroups":["discovery.k8s.io"],"resources":["endpointslices"],"verbs":["list","watch"]}]}'
  oc patch -n openshift-ingress deployment/router-default --patch='{"spec":{"template":{"spec":{"securityContext":{"runAsUser":0}}}}}'
}

function oc_ingress_scale_router_default() {
  if [[ $1 = "" ]]; then
    echo "ERROR: You need to provide a scale #"
    return 1
  fi
  oc scale --replicas=$1 -n openshift-ingress deployment/router-default
}

function oc_ingress_scale_ingress_operator() {
  if [[ $1 = "" ]]; then
    echo "ERROR: You need to provide a scale #"
    return 1
  fi
  oc scale --replicas $1 -n openshift-ingress-operator deployments ingress-operator
}

function oc_ingress_rsh_only_router_default() {
  if [[ $(oc get pods -n openshift-ingress --no-headers | grep "^router-default" | grep Running |  wc -l) -ne 1 ]]; then
    echo "ERROR: There are either 0 or more than 1 default routers running"
    oc get pods -n openshift-ingress
    return 1
  fi

  oc rsh -n openshift-ingress $(oc get pods -n openshift-ingress --no-headers | grep "^router-default" | grep Running | head -1 | awk '{print $1}')
}

function oc_ingress_rsh_any_router_default() {
  oc rsh -n openshift-ingress $(oc get pods -n openshift-ingress --no-headers | grep "^router-default" | grep Running | head -1 | awk '{print $1}')
}

function oc_ingress_exec_any_router() {
  router="$1"
  shift 1
  oc exec -n openshift-ingress $(oc get pods -n openshift-ingress --no-headers | grep "^router-${router}" | grep Running | head -1 | awk '{print $1}') $@
}

function oc_ingress_cp_into_only_router_default() {
  if [[ $(oc get pods -n openshift-ingress --no-headers | grep "^router-default" | grep Running |  wc -l) -ne 1 ]]; then
    echo "ERROR: There are either 0 or more than 1 default routers running"
    oc get pods -n openshift-ingress
    return 1
  fi

  oc cp -n openshift-ingress $1 $(oc get pods -n openshift-ingress --no-headers | grep "^router-default" | grep Running | head -1 | awk '{print $1}'):${2}
}

function oc_ingress_cp_out_any_router_default() {
  oc cp -n openshift-ingress $(oc get pods -n openshift-ingress --no-headers | grep "^router-default" | grep Running | head -1 | awk '{print $1}'):${1} $(basename ${1})
}

function oc_ingress_haproxy_debug_router_default() {
  if [[ $(oc get pods -n openshift-ingress --no-headers | grep "^router-default" | grep Running |  wc -l) -ne 1 ]]; then
    echo "ERROR: There are either 0 or more than 1 default routers running"
    oc get pods -n openshift-ingress
    return 1
  fi

  oc exec -n openshift-ingress $(oc get pods -n openshift-ingress --no-headers | grep "^router-default" | grep Running | head -1 | awk '{print $1}') -- bash -c "killall haproxy; pkill haproxy; haproxy -f /var/lib/haproxy/conf/haproxy.config -V -d"
}


function oc_ingress_get_router_pods() {
  oc get pods -n openshift-ingress $@
}

function oc_ingress_get_ingress_operator() {
  oc get pods -n openshift-ingress-operator $@
}

function oc_ingress_get_ingress_controllers() {
  oc get -n openshift-ingress-operator ingresscontrollers $@
}

function oc_ingress_logs_ingress_operator() {
  oc logs -n openshift-ingress-operator $(oc get -n openshift-ingress-operator pods --no-headers | head -1 | awk '{print $1}') -c ingress-operator $@
}

function oc_ingress_enable_http2_router_default() {
  oc -n openshift-ingress-operator annotate ingresscontrollers/default ingress.operator.openshift.io/default-enable-http2=true
}

function oc_ingress_edit_ingresscontroller() {
  if [[ "$1" == "" ]]; then
    IC="default"
  else
    IC="$1"
  fi

  oc edit -n openshift-ingress-operator ingresscontrollers/${IC}
}


function oc_ingress_delete_ingresscontroller() {
  if [[ "$1" == "" ]]; then
    echo "ERROR: You need to provide an ingress controller name"
    return 1
  fi

  oc delete -n openshift-ingress-operator ingresscontroller $@
}

function oc_ingress_logs_any_router_default_access() {
  oc logs -n openshift-ingress $(oc get pods -n openshift-ingress --no-headers | grep "^router-default" | grep Running | head -1 | awk '{print $1}') -c logs --follow $@
}
